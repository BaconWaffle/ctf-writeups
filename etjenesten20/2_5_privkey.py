keys = """\
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCdNs2G40fwpq2rGXn5QCwz9NxGdAhJCBkcpLPSh5i9rNpHKsbcupmpmT4yaqYjF2EBJrG6/yJhKKwdxOjt3gawExzlR3fymkeXZ9L8LcTcSgD7h3tHWsjnSGER1XyHN8QMUcO0jD26VRPXE2nnSDdiW6c5p+xm6YQHjnGM+WH37yO+87chbURSujZSWELixU/rqL7L5dSuXs0gmFB9DWcIHW8Atuk5awyzAV4LkNn5sKySv+wIwoPbL7TuY9sBRXZFLJmHHLKd1I3Z1a002jqd1vuxAk6CXI4oU9uxMynpDSYG/8vu8ebEzGpXBYnzlQwlAohldfiDQy1hJN4X5lqV
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAGWCDRRlJQIHip1MPnov5rh5DMrWO8aE7Ow6dpCdEr7D2V+Cw95eu1Uw8QCjAjiHwu66hQnZT4F7ybu+UV6LesBzoHZhC99lAtyzfnS/EqEhIHOREj9zq6ECrj/zCmQm48cGwV+2eOMLRbjBnQEQGTvVK5XaWwWNGmND41mRDQoZU7UA0uNsU205yU7Pepbg8hPCJ7iedv5a97Gl5Gi6VI35FjJo+srE0/ANR+2F51GlGWiaIDlWq5jiLw1IOCt7cw5ZWEmV+mNlXTEsLTIiyoJymUct6nvRIhjvN4S64snLhvZXSh363JfQRnGSNpi5aDsyYQSLC7xBAGPVJw0tU9U=
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9ba30K6tnVLrM6M1uSjMpi5LszJj7TSrT4RYVt+kpB9Jy2jo00XgvW7eoEBysiq83tGtN9xoVIIRh+I0iVmEbL5t76BITAH8FJrqPYqjVXIQ3huhFgzqqtjPaRb0V1NWKcVbk0KNuEgia4ZIBvL37ZA26HGEndoum46dvbgvEa6nnA5dQQIBsZMz7uZ0reABKuHEbNJ1FrBAiCn7Lcoql6hu2seO+bPuxogSOeNHA1xIK59B9d9K/W8f2LSVT/icp1qPojLHekJBR47IWXYkVSsanPnk8Q4fimopjfe2aIfl8pASjjSgjRdE4dFmEvPESB8q1K9dynZv23MZG1FsJ
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAQ7DBO12lh70hlPg6xlKP5tqwVhu0jPRIQMIKEFfWlGAw+8KxD6t9PfgYynGduTBPlv8yNGlgDoWO+e0ohhGNPJbl9mSGXIY1WiLaGpsYiV43LjKGdxSm9eS0EV5QUCTrHhLzXnh0eqPbWot69cZSRVAFDciTHf4Ura6JdW+DVLZ0X/zEc+MhNNAPEtsaqzrhcfCjx0PDEUVEKe0UiD8Q8RWzNfKDutaTrMyb31posw8pjXopRiUvXHAllepv/xPysBOwpAh9MZxG5TQXIOp6y2z6TCi+J8LSPg33nQ4g7V0XqcO6VOGiuYbFa9sX4KLBLY8KgVdymPAfHl+NPjzb
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDUO4Q8Nbmu1mMnGJK5B5cKXPBlKoQAZa8Ai67BhVtZ6I3MgesMgej0dok9kBaZpWbQJ2l82KVlEpEzto2+xeaMG+8kK1a+Wxd9dVLI/R9KWGkxs0/Yxl1Wil/FZ5uniEMANvhaK9H3gzxWp2x5ly+yEBLMtwQFWh5RPKfRKTnqPUHiUBHqDa3t+jV7XOo665NhQ9+cgEM6XzRLMyj4ofnQV9GoksQGZCBm1u3jA4Mlh9V6Smf+FRvf0gVl+fw+qd8NW3DLsw5XIpp+xhIatoL4I8yW7G7WytZt3+DIac+IHUbbHkF+HzaSzyRsDif2qNJye/7cVrgkszVzd9UlkR31
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCdsvsci5IVdBPdi0Du8E+xp3jh4aWDx/QjzFwPXuQtTG1GODOuCVwYLufcqNdDrdaTe7GBRa2xLFuzIX1oYUy+a4dNDJuJHYdLi7Cw33ejVsro13b4DQEFm85S11zmVmgvv0dHiy+KrNixPrDV/nRfYQQjxmc3/P0TPJcDGVNOmO9J0/v3ujroBjI8+gpuonqN3e+xvmLRzdxdNXW4VENpu0vI86FfBZ0tkrCdYMrSn80jn/5uVEJPynBildlJCp0iBSvqmkOOu994EhTlgnrIfzQJKdMGIy1gv93wcJxk17HiYgM8KcVe3AYlmWfdrwC8P4bLif63+dqyQ6kWNz37
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjXMUP1QAV+yJBPhdHy7NdbX9HwyfRzhmXF4HiBCxpJbRnetnOtZs1TGDwOptk61AdBNNAwoHc7knRt4p+MYiBx9FVrAxqu/+hPn5rlKWJKB/wCt247bx6ThLKLRg1r2wtSd9qQX7cXB4d3OZly+1A3WdGoooWECFJBhHFcnvjZ8KxljO3FfCkfe9z6vQOb+Sf/rE9yYrPh1eoRg9d2YpwEY+4uJR56CFeEAI/LDITbV6mbDwh8xl5ruu8MSs9tdu10HWihmCAZyvCT4FcIA+q/r/a18aodwUqxVNAYX0GS2MoLJuqRY1Y9s6qmxvCyOj4kM560kaz80nuULS+kkuP
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0Vw/yUrmjlVfzasi3S9gJiWHvePja3M9LyDm/UEU54HtFgh/VylsLioqeQUUDkfPKzpZ0FgDPVFehPGnuft5wb3eF6bf/SRV1zbhJChaseCziWitR+4A/Fq6bQZx98S6bZi9usfGrVw1CCD84jNETGYO5TgfbhauuK/ECvupU7KfdNr/SK2bzyYH8FZrKrPuP3ZzruojTnIAF3DxlYcF0zSZuj+j31IbWdKOdtx6B/1ydv7yJcBl/XAjBGssM0ytyYTeI7L0qSgCTUbyteJ0hy4OYUTUB7mCEnNQIMuknITMK9fKPtUCReh6HwyEuNS4M2uVQVvyr7Xsk2CU77FxP
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRxi+RiZUVctodSwECa+ExkRlEUGlhLhX5c5drIAWmNeHW29mROl3D0smZFGvf5WSq7ff/BqKagWSBnUt2ImF0oAOVOJ8UBnCKAHWEZxg3eCzjdJhlWrlRdFO+HzHQWVrM9q7RahtWgXIgLys4lgZI5paaEvRBCnCLLnqFmzN4sFSzBsHAImx+rJzFgCT3XFs5gd5lGg7vCRGrjZsZzCAYbfYeYgge4TCk8IeCw1pwhbkKtV6mRlFI5j0IUyqzHUu/Hnj8EK/4eH8cmSOi+9rUKB3yoxxzqfBAH+bkITdhZ/O99qW4bTbEiONVVuleeTKqwRixTg3GEJHGQQNiXxur
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCXshQaiVZgs27O765SM4FU+gViJuXkuv0OMd1NNtFQaMFCEaa+d7GWfG0bv6izSVo1ghbDfm3pH93MqArUB45trs/oLX0RTNqzqXAhNCzBRZk8rsi8NmYfnnMHgoL6+TwRVElLsO9UJ/g+ahak1AR1BKdAabX/G0FfiPiYxu9y0xQcDQGBCERPxZsGkOhUwwwvkqnqJoqGgWbE4JoE6cdnsRpZ+HqVB92esR6ASxiico5nI+kkzU3q7hCeNBagOCFzcBpEryiTDtQkF2MCV8CU9UOSna61bas2O+pbMvGpP6ZEdT4Eh0Zp4gi54yRoPwD0/10D0LIttgvlyumTZjqf
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCaSUFSNmKUuzlnhAWRKl+5GFLcvTTNBf96MXnJQo0VtfMqhm+D3SGcyoL7a4LDNQSQz0d51fnC9g0u4sUDsATjcqKkWIDKX/dJ+/MYgichEviS+8aUSCwV0ebf1XTeRVF5IC27irV8nzuOAtTPsQfrFJsrxKNPN29n8xGu4K/GpRPoHYqQJHK8hjvBtPfBQMTg2l1ZL9NnCzl3iBZpZpzs61a/yzyIYSwdTRziIQQc3klUYJtV8Ps5FPF2r2ejH1nleiw2b/CgGegi3JXq6axebl4NiXIPGinaL7fnSArk3ReAJT53luTPwgjdwgdMazhak/3HqT2nds0FlDqg4zmb
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABADZOrVfFjESstqajNdhzwn8wlQ2zLsz9Gj5Dp1KMK6BSHULRYEpQtyPpatlPdhGgALRLYtjonjfR4LAt0asyPSPbNu7gAWALNlS/xF2iHUqiMxxj5/r4Xj8hfp7XD2TGxlVZlw5xW45t7LIVr/f1iFiWXcj6xqXzkdSKFoev43hsdt6bMYEZKdEN2Y+1w1KlKUFOWh/3yms2C/WItVJMSWeYaZcxG02JXTZFLFVAz3IryQRaVQlVizVlDGKt25wzVmTzVjAQoF9QusM7kAxcuSB8f5etGN+oPltHCacTLC6Dcn5E52mtb+xIvT5nrof6va+Zzy8Pa5nJTCEsRGihLGk=
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAEMLTzLPdHVG9z03S2vfehLa/2DcTlJYecNu0uCNdUgpuiS2H3RNmVPxUKsGNgB4lisNJ5AGq2TKuKNC9tTC+rTF0ZKo0SvQUl5Qc0ySoMo+kZvwEka+S2aJxFXdDH8AyYNBy73dtRFbzdo/TUp5ULpiNxAmNpNsqej/V+X69PfxUhNvyub19phTFWFJtLnU8CgJbyRtGWjtbulkl8kDXYx/a02G6vMiUHZHhvXNrMVDr9fRGEn9Bc00mizmOkehTyVR/w9rNNHE/y99SOJXEEwLJ5Sq/1Y7RodYbZATfFL/ycbaqOi5g7cBhmjZA5VkiuovFEfNrbctd504v7wl+rk=
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXfsYexqLR/U5AsndUVPJ1zsWSkGAQLOZiOyKnhLkiVM1sh5Z46a4+ZKGc7TSaTACKKfd+cwB11EL3z/W0AiaOT98S2uv25V7ZUvHQE0qXo5KgVdxUqYPLra3hTDqcHfgBz2Ge8etASE+jwlQ9V/szc2oihHnNhtGSE8pGqa4zNsGKYTAJiG0qdg46HgcsZeoG6ArxfNTvy6hsFwt5aI7RD59WzGdW+3pwgBe2rg0fXOoV49ZFCF+3Ef0zIpDxGV9/F4E/uHRqQ4syIQkcuYNsZ6v2KN5aJaMEpKuGidukp+aQe7iovemRsbSA87WbDITLc2jT8OwIA16/lOLlO9N1
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAEj0NPpsmMhctkAa36yx+MR6uFuS55mHyIyerpvnuDcHIXb/hD522j8QOFJS3pwj1trDPOL55aMC30m1otr+eeK95UnZj2xtubyPiXL7tZQFJfraelBCaRz6Kf0GWN7HSdAWGSxJ0Npr5nteAtcHPRqx4SMnTfEn9J3Vh4GJUc0Mo597qQT6nQFYhTdJrUl2D0zqdVlY/6bLSXgF83bXFYPpk4UpGW7azL8Qr5eBZWBXadzYvPWdhT88NpHRx8bfpw4u3E/a3N/WCr1Ry6B4KhBtrvkSbSHn5fcM34hXwo9eJV2sr16zoq7CY2C9XL/kyp9bH/AQPPfHP5oJ9VWRJgk=
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAE6TrdELYMzOjf8ZLqCJaP11oumuoNvRiDuu/NbpXDTCK6catMg/zHTDziOxHxwQd38nfr3HUF9K+TWCr7Rne6nsyHATWpcY2aBIQIreAD4JnGUgJ6ZlcuuGRkVlJtEc+UXc7CkzHVFat2NqbvM2mu11IPjTB80PdCEDAN2TVVtv+q2rPpTLtBkPWyRJX6g2POt+z9DjK1xpGdi6c80LzHtIsrog81iW1fmSvejwZNC+NZqeSlYIZf6kqtdq7vx5xNuYpSV9ajELoMjySG3YGENqejDAFPQOGu33V9LJtkDaH3L2HnxeXtKZxAry017bCI7eqsxmOH6K0SJaRgp6dVk=
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAFyOYKiX0NxY7XU37SPrp60gkkdd5V7Cm4xx6toIoP5cAGfboG12KKs+zDszyYlvEDRT8NgauuylF8J7LVI8C59G6cdtgovw1FA0eojBi+b1SNopLcWRoDDSB0xBWKGcMNbxRkgKknSVM+bDunaKRIdwEdz1jK6mebGzj1aTADubPfvPEt5C5hwKI8v4+VqtUyVG5zx7kYOyKVCUO+qPCW3Gs1rCmYDFd7zrMl9dyAhMTINUeBJkHD+rrfrBYJ3XCGTzG03CDKKte5RJywE/I00wNHJTATqfiuLoWfm6gugCXEeuvpMlJ+jfzMoR9vmeW5I6pELbn4wv5W4VAAcL7nM=
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCZxGzQI7SFNQdKFCujuiMHf0j9nqfaQYZ8RsD/eMBcd1B7qtoP4YPrwP2XTr0TcRW7zuw0HMfd4PkcqFOpCvWELF56zTqrbYQg5CCRYyKwrQfVTuizLt0v+uN8DiOQK8HRZ4DeoU4wIWYmH/ep/ZQNS4RQ8g9RnbjNnJe1hn2iSlguA9ToT7OkGuhe59f/gBdzZQJA3MFtmhIc96zwH+5LyoJyYt/6U/j9ApMSHO2XeacbZvQOOkSo29MX6LRQmQcEYmrl6u4Lc+0NFdhMbacc6YHkpw9Wf48I27Uf0rptHJF/HaeXT2AZjU1m8dLC5/qDnPvdJVPRLZO9wljRp04R
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF5303+AgwCFCG+e2TyB3CcNm+qPwrdkHzwrnqLrWC3+2TbiXBhWH/mGCVwJ9HmFcYXoYNvNP9c3s6XyZI4otiwn7XGyUW1adR2h89+ExNpYMJX4EQaKPgHSe9vku2IkzxvTUut2mxCZVzM6r7U9IrHmQt+degexjd0DGvF+AFjOqfEJP8hWDdZzZee3QJPWCwJi65I1148Sz/y10ORdWwVGhYl9Wsg20iXM+m/4xBfIhkCEiI3UCwYQFvLoXg+k9L4ogrHaAoX9/FrNi1HwthOGSr/h89TyP3KzAN3/jUSzLkl3AtENzDe2xtXyMMd3qXHoxat2k1FepPj8S74oIp
"""

from sshpubkeys import SSHKey
from fractions import gcd
from gmpy2 import invert
from Crypto.PublicKey import RSA



target = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjXMUP1QAV+yJBPhdHy7NdbX9HwyfRzhmXF4HiBCxpJbRnetnOtZs1TGDwOptk61AdBNNAwoHc7knRt4p+MYiBx9FVrAxqu/+hPn5rlKWJKB/wCt247bx6ThLKLRg1r2wtSd9qQX7cXB4d3OZly+1A3WdGoooWECFJBhHFcnvjZ8KxljO3FfCkfe9z6vQOb+Sf/rE9yYrPh1eoRg9d2YpwEY+4uJR56CFeEAI/LDITbV6mbDwh8xl5ruu8MSs9tdu10HWihmCAZyvCT4FcIA+q/r/a18aodwUqxVNAYX0GS2MoLJuqRY1Y9s6qmxvCyOj4kM560kaz80nuULS+kkuP oper@cloud-hq-42"

mods = []
for key in keys.strip().split("\n"):
    s = SSHKey(key)
    n = s.rsa.public_numbers().n
    mods.append(n)

s = SSHKey(target)
e = s.rsa.public_numbers().e
n = s.rsa.public_numbers().n
for m in mods:
    if n != m:
        p = gcd(n, m)
        if p != 1:
            print(p)
            break
else:
    assert False

q = n // p
print(p, q, e)

assert p*q == n
phi = (p-1)*(q-1)
d = int(invert(e, phi))

key = RSA.construct((n, e, d, p, q))

with open("privkey.pem", "wb") as fd:
    fd.write(key.export_key('PEM'))





